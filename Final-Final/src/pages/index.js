import { getServerSession } from "next-auth";
import Head from "next/head";
import Nextauth from "./api/auth/[...nextauth]";
import Header from "@/layout/header";
import HomeView from "@/View/home";
import OrganizeView from "@/View/organize";
import PaperView from "@/View/paper";
import ReviewView from "@/View/review";
import { prisma } from "@/lib/db";

export default function Home({ user, statistics }) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!user ? (
        <div className="grid">
          <Header />
          <HomeView statistics={statistics} />
        </div>
      ) : (
        <>
          <Header />
          {user && user.role === "organizer" && <OrganizeView />}
          {user && user.role === "author" && <PaperView />}
          {user && user.role === "reviewer" && <ReviewView />}
        </>
      )}
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res, Nextauth);
  console.log(session);

  const papers = await prisma.paper.findMany({
    include: { review: true },
  });
  const allUsers = await prisma.user.findMany({});
  const acceptedPapers = papers.reduce(
    (p, c) =>
      p + (c.review?.evalutation !== "2" && c.review?.contribution !== "5")
        ? 0
        : 1,
    0
  );
  const rejectedPapers = papers.reduce(
    (p, c) =>
      p + (c.review?.evalutation !== "2" && c.review?.contribution !== "5")
        ? 1
        : 0,
    0
  );
  if (!session) {
    return {
      props: {
        statistics: {
          paperCount: papers.length,
          averagePerUser: papers.length / allUsers.length,
          acceptedPapers,
          rejectedPapers,
        },
      },
    };
  }
  const user = await prisma.user.findFirst({
    where: { email: session.user.email },
  });
  return {
    props: {
      user,
      statistics: {
        paperCount: papers.length,
        averagePerUser: papers.length / allUsers.length,
        acceptedPapers,
        rejectedPapers,
      },
    },
  };
}
